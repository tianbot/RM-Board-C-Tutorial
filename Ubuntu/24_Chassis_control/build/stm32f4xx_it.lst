ARM GAS  /tmp/ccV3Z8WK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB135:
  28              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f4xx_it.c **** /**
   3:Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Src/stm32f4xx_it.c ****   * @attention
   8:Src/stm32f4xx_it.c ****   *
   9:Src/stm32f4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2025 STMicroelectronics.
  10:Src/stm32f4xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f4xx_it.c ****   *
  12:Src/stm32f4xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f4xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f4xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32f4xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32f4xx_it.c ****   *
  17:Src/stm32f4xx_it.c ****   ******************************************************************************
  18:Src/stm32f4xx_it.c ****   */
  19:Src/stm32f4xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f4xx_it.c **** 
  21:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f4xx_it.c **** #include "main.h"
  23:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  24:Src/stm32f4xx_it.c **** #include "FreeRTOS.h"
  25:Src/stm32f4xx_it.c **** #include "task.h"
  26:Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  27:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  28:Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  29:Src/stm32f4xx_it.c **** 
  30:Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccV3Z8WK.s 			page 2


  31:Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  32:Src/stm32f4xx_it.c **** 
  33:Src/stm32f4xx_it.c **** /* USER CODE END TD */
  34:Src/stm32f4xx_it.c **** 
  35:Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  36:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  37:Src/stm32f4xx_it.c **** 
  38:Src/stm32f4xx_it.c **** /* USER CODE END PD */
  39:Src/stm32f4xx_it.c **** 
  40:Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  41:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  42:Src/stm32f4xx_it.c **** 
  43:Src/stm32f4xx_it.c **** /* USER CODE END PM */
  44:Src/stm32f4xx_it.c **** 
  45:Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  46:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  47:Src/stm32f4xx_it.c **** 
  48:Src/stm32f4xx_it.c **** /* USER CODE END PV */
  49:Src/stm32f4xx_it.c **** 
  50:Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  51:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  52:Src/stm32f4xx_it.c **** 
  53:Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  54:Src/stm32f4xx_it.c **** 
  55:Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  56:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  57:Src/stm32f4xx_it.c **** 
  58:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  59:Src/stm32f4xx_it.c **** 
  60:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  61:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  62:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan2;
  63:Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  64:Src/stm32f4xx_it.c **** 
  65:Src/stm32f4xx_it.c **** /* USER CODE END EV */
  66:Src/stm32f4xx_it.c **** 
  67:Src/stm32f4xx_it.c **** /******************************************************************************/
  68:Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  69:Src/stm32f4xx_it.c **** /******************************************************************************/
  70:Src/stm32f4xx_it.c **** /**
  71:Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Src/stm32f4xx_it.c ****   */
  73:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  74:Src/stm32f4xx_it.c **** {
  29              		.loc 1 74 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  75:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Src/stm32f4xx_it.c **** 
  77:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Src/stm32f4xx_it.c **** 
  80:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Src/stm32f4xx_it.c **** }
  34              		.loc 1 81 1 view .LVU1
ARM GAS  /tmp/ccV3Z8WK.s 			page 3


  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE135:
  39              		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	1
  41              		.global	HardFault_Handler
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	HardFault_Handler:
  47              	.LFB136:
  82:Src/stm32f4xx_it.c **** 
  83:Src/stm32f4xx_it.c **** /**
  84:Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Src/stm32f4xx_it.c ****   */
  86:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  87:Src/stm32f4xx_it.c **** {
  48              		.loc 1 87 1 view -0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.L3:
  88:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Src/stm32f4xx_it.c **** 
  90:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Src/stm32f4xx_it.c ****   while (1)
  55              		.loc 1 91 3 discriminator 1 view .LVU3
  92:Src/stm32f4xx_it.c ****   {
  93:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Src/stm32f4xx_it.c ****   }
  56              		.loc 1 95 3 discriminator 1 view .LVU4
  91:Src/stm32f4xx_it.c ****   {
  57              		.loc 1 91 9 discriminator 1 view .LVU5
  58 0000 FEE7     		b	.L3
  59              		.cfi_endproc
  60              	.LFE136:
  62              		.section	.text.MemManage_Handler,"ax",%progbits
  63              		.align	1
  64              		.global	MemManage_Handler
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	MemManage_Handler:
  70              	.LFB137:
  96:Src/stm32f4xx_it.c **** }
  97:Src/stm32f4xx_it.c **** 
  98:Src/stm32f4xx_it.c **** /**
  99:Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 100:Src/stm32f4xx_it.c ****   */
 101:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 102:Src/stm32f4xx_it.c **** {
  71              		.loc 1 102 1 view -0
  72              		.cfi_startproc
  73              		@ Volatile: function does not return.
ARM GAS  /tmp/ccV3Z8WK.s 			page 4


  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.L5:
 103:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 104:Src/stm32f4xx_it.c **** 
 105:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 106:Src/stm32f4xx_it.c ****   while (1)
  78              		.loc 1 106 3 discriminator 1 view .LVU7
 107:Src/stm32f4xx_it.c ****   {
 108:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 109:Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 110:Src/stm32f4xx_it.c ****   }
  79              		.loc 1 110 3 discriminator 1 view .LVU8
 106:Src/stm32f4xx_it.c ****   {
  80              		.loc 1 106 9 discriminator 1 view .LVU9
  81 0000 FEE7     		b	.L5
  82              		.cfi_endproc
  83              	.LFE137:
  85              		.section	.text.BusFault_Handler,"ax",%progbits
  86              		.align	1
  87              		.global	BusFault_Handler
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  92              	BusFault_Handler:
  93              	.LFB138:
 111:Src/stm32f4xx_it.c **** }
 112:Src/stm32f4xx_it.c **** 
 113:Src/stm32f4xx_it.c **** /**
 114:Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 115:Src/stm32f4xx_it.c ****   */
 116:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 117:Src/stm32f4xx_it.c **** {
  94              		.loc 1 117 1 view -0
  95              		.cfi_startproc
  96              		@ Volatile: function does not return.
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.L7:
 118:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 119:Src/stm32f4xx_it.c **** 
 120:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 121:Src/stm32f4xx_it.c ****   while (1)
 101              		.loc 1 121 3 discriminator 1 view .LVU11
 122:Src/stm32f4xx_it.c ****   {
 123:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 124:Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 125:Src/stm32f4xx_it.c ****   }
 102              		.loc 1 125 3 discriminator 1 view .LVU12
 121:Src/stm32f4xx_it.c ****   {
 103              		.loc 1 121 9 discriminator 1 view .LVU13
 104 0000 FEE7     		b	.L7
 105              		.cfi_endproc
 106              	.LFE138:
 108              		.section	.text.UsageFault_Handler,"ax",%progbits
ARM GAS  /tmp/ccV3Z8WK.s 			page 5


 109              		.align	1
 110              		.global	UsageFault_Handler
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 115              	UsageFault_Handler:
 116              	.LFB139:
 126:Src/stm32f4xx_it.c **** }
 127:Src/stm32f4xx_it.c **** 
 128:Src/stm32f4xx_it.c **** /**
 129:Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 130:Src/stm32f4xx_it.c ****   */
 131:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 132:Src/stm32f4xx_it.c **** {
 117              		.loc 1 132 1 view -0
 118              		.cfi_startproc
 119              		@ Volatile: function does not return.
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.L9:
 133:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 134:Src/stm32f4xx_it.c **** 
 135:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 136:Src/stm32f4xx_it.c ****   while (1)
 124              		.loc 1 136 3 discriminator 1 view .LVU15
 137:Src/stm32f4xx_it.c ****   {
 138:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 139:Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 140:Src/stm32f4xx_it.c ****   }
 125              		.loc 1 140 3 discriminator 1 view .LVU16
 136:Src/stm32f4xx_it.c ****   {
 126              		.loc 1 136 9 discriminator 1 view .LVU17
 127 0000 FEE7     		b	.L9
 128              		.cfi_endproc
 129              	.LFE139:
 131              		.section	.text.DebugMon_Handler,"ax",%progbits
 132              		.align	1
 133              		.global	DebugMon_Handler
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 138              	DebugMon_Handler:
 139              	.LFB140:
 141:Src/stm32f4xx_it.c **** }
 142:Src/stm32f4xx_it.c **** 
 143:Src/stm32f4xx_it.c **** /**
 144:Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 145:Src/stm32f4xx_it.c ****   */
 146:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 147:Src/stm32f4xx_it.c **** {
 140              		.loc 1 147 1 view -0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 148:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
ARM GAS  /tmp/ccV3Z8WK.s 			page 6


 149:Src/stm32f4xx_it.c **** 
 150:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 151:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 152:Src/stm32f4xx_it.c **** 
 153:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 154:Src/stm32f4xx_it.c **** }
 145              		.loc 1 154 1 view .LVU19
 146 0000 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE140:
 150              		.section	.text.SysTick_Handler,"ax",%progbits
 151              		.align	1
 152              		.global	SysTick_Handler
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	SysTick_Handler:
 158              	.LFB141:
 155:Src/stm32f4xx_it.c **** 
 156:Src/stm32f4xx_it.c **** /**
 157:Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 158:Src/stm32f4xx_it.c ****   */
 159:Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 160:Src/stm32f4xx_it.c **** {
 159              		.loc 1 160 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163 0000 08B5     		push	{r3, lr}
 164              	.LCFI0:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 3, -8
 167              		.cfi_offset 14, -4
 161:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 162:Src/stm32f4xx_it.c **** 
 163:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 164:Src/stm32f4xx_it.c ****   HAL_IncTick();
 168              		.loc 1 164 3 view .LVU21
 169 0002 FFF7FEFF 		bl	HAL_IncTick
 170              	.LVL0:
 165:Src/stm32f4xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 166:Src/stm32f4xx_it.c ****   if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 171              		.loc 1 166 3 view .LVU22
 172              		.loc 1 166 7 is_stmt 0 view .LVU23
 173 0006 FFF7FEFF 		bl	xTaskGetSchedulerState
 174              	.LVL1:
 175              		.loc 1 166 6 view .LVU24
 176 000a 0128     		cmp	r0, #1
 177 000c 00D1     		bne	.L14
 178              	.L11:
 167:Src/stm32f4xx_it.c ****   {
 168:Src/stm32f4xx_it.c **** #endif /* INCLUDE_xTaskGetSchedulerState */
 169:Src/stm32f4xx_it.c ****   xPortSysTickHandler();
 170:Src/stm32f4xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 171:Src/stm32f4xx_it.c ****   }
 172:Src/stm32f4xx_it.c **** #endif /* INCLUDE_xTaskGetSchedulerState */
 173:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
ARM GAS  /tmp/ccV3Z8WK.s 			page 7


 174:Src/stm32f4xx_it.c **** 
 175:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 176:Src/stm32f4xx_it.c **** }
 179              		.loc 1 176 1 view .LVU25
 180 000e 08BD     		pop	{r3, pc}
 181              	.L14:
 169:Src/stm32f4xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 182              		.loc 1 169 3 is_stmt 1 view .LVU26
 183 0010 FFF7FEFF 		bl	xPortSysTickHandler
 184              	.LVL2:
 185              		.loc 1 176 1 is_stmt 0 view .LVU27
 186 0014 FBE7     		b	.L11
 187              		.cfi_endproc
 188              	.LFE141:
 190              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 191              		.align	1
 192              		.global	EXTI0_IRQHandler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	EXTI0_IRQHandler:
 198              	.LFB142:
 177:Src/stm32f4xx_it.c **** 
 178:Src/stm32f4xx_it.c **** /******************************************************************************/
 179:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 180:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 181:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 182:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 183:Src/stm32f4xx_it.c **** /******************************************************************************/
 184:Src/stm32f4xx_it.c **** 
 185:Src/stm32f4xx_it.c **** /**
 186:Src/stm32f4xx_it.c ****   * @brief This function handles EXTI line0 interrupt.
 187:Src/stm32f4xx_it.c ****   */
 188:Src/stm32f4xx_it.c **** void EXTI0_IRQHandler(void)
 189:Src/stm32f4xx_it.c **** {
 199              		.loc 1 189 1 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI1:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 190:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI0_IRQn 0 */
 191:Src/stm32f4xx_it.c **** 
 192:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI0_IRQn 0 */
 193:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 208              		.loc 1 193 3 view .LVU29
 209 0002 0120     		movs	r0, #1
 210 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 211              	.LVL3:
 194:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI0_IRQn 1 */
 195:Src/stm32f4xx_it.c **** 
 196:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI0_IRQn 1 */
 197:Src/stm32f4xx_it.c **** }
 212              		.loc 1 197 1 is_stmt 0 view .LVU30
ARM GAS  /tmp/ccV3Z8WK.s 			page 8


 213 0008 08BD     		pop	{r3, pc}
 214              		.cfi_endproc
 215              	.LFE142:
 217              		.section	.text.EXTI3_IRQHandler,"ax",%progbits
 218              		.align	1
 219              		.global	EXTI3_IRQHandler
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 224              	EXTI3_IRQHandler:
 225              	.LFB143:
 198:Src/stm32f4xx_it.c **** 
 199:Src/stm32f4xx_it.c **** /**
 200:Src/stm32f4xx_it.c ****   * @brief This function handles EXTI line3 interrupt.
 201:Src/stm32f4xx_it.c ****   */
 202:Src/stm32f4xx_it.c **** void EXTI3_IRQHandler(void)
 203:Src/stm32f4xx_it.c **** {
 226              		.loc 1 203 1 is_stmt 1 view -0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI2:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 204:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 0 */
 205:Src/stm32f4xx_it.c **** 
 206:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI3_IRQn 0 */
 207:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(DRDY_IST8310_Pin);
 235              		.loc 1 207 3 view .LVU32
 236 0002 0820     		movs	r0, #8
 237 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 238              	.LVL4:
 208:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 1 */
 209:Src/stm32f4xx_it.c **** 
 210:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI3_IRQn 1 */
 211:Src/stm32f4xx_it.c **** }
 239              		.loc 1 211 1 is_stmt 0 view .LVU33
 240 0008 08BD     		pop	{r3, pc}
 241              		.cfi_endproc
 242              	.LFE143:
 244              		.section	.text.EXTI4_IRQHandler,"ax",%progbits
 245              		.align	1
 246              		.global	EXTI4_IRQHandler
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 251              	EXTI4_IRQHandler:
 252              	.LFB144:
 212:Src/stm32f4xx_it.c **** 
 213:Src/stm32f4xx_it.c **** /**
 214:Src/stm32f4xx_it.c ****   * @brief This function handles EXTI line4 interrupt.
 215:Src/stm32f4xx_it.c ****   */
 216:Src/stm32f4xx_it.c **** void EXTI4_IRQHandler(void)
 217:Src/stm32f4xx_it.c **** {
 253              		.loc 1 217 1 is_stmt 1 view -0
ARM GAS  /tmp/ccV3Z8WK.s 			page 9


 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257 0000 08B5     		push	{r3, lr}
 258              	.LCFI3:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 3, -8
 261              		.cfi_offset 14, -4
 218:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 0 */
 219:Src/stm32f4xx_it.c **** 
 220:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI4_IRQn 0 */
 221:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin);
 262              		.loc 1 221 3 view .LVU35
 263 0002 1020     		movs	r0, #16
 264 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 265              	.LVL5:
 222:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 1 */
 223:Src/stm32f4xx_it.c **** 
 224:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI4_IRQn 1 */
 225:Src/stm32f4xx_it.c **** }
 266              		.loc 1 225 1 is_stmt 0 view .LVU36
 267 0008 08BD     		pop	{r3, pc}
 268              		.cfi_endproc
 269              	.LFE144:
 271              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 272              		.align	1
 273              		.global	CAN1_RX0_IRQHandler
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	CAN1_RX0_IRQHandler:
 279              	.LFB145:
 226:Src/stm32f4xx_it.c **** 
 227:Src/stm32f4xx_it.c **** /**
 228:Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupts.
 229:Src/stm32f4xx_it.c ****   */
 230:Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 231:Src/stm32f4xx_it.c **** {
 280              		.loc 1 231 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 232:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 233:Src/stm32f4xx_it.c **** 
 234:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 235:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 289              		.loc 1 235 3 view .LVU38
 290 0002 0248     		ldr	r0, .L23
 291 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 292              	.LVL6:
 236:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 237:Src/stm32f4xx_it.c **** 
ARM GAS  /tmp/ccV3Z8WK.s 			page 10


 238:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 239:Src/stm32f4xx_it.c **** }
 293              		.loc 1 239 1 is_stmt 0 view .LVU39
 294 0008 08BD     		pop	{r3, pc}
 295              	.L24:
 296 000a 00BF     		.align	2
 297              	.L23:
 298 000c 00000000 		.word	hcan1
 299              		.cfi_endproc
 300              	.LFE145:
 302              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 303              		.align	1
 304              		.global	EXTI9_5_IRQHandler
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 309              	EXTI9_5_IRQHandler:
 310              	.LFB146:
 240:Src/stm32f4xx_it.c **** 
 241:Src/stm32f4xx_it.c **** /**
 242:Src/stm32f4xx_it.c ****   * @brief This function handles EXTI line[9:5] interrupts.
 243:Src/stm32f4xx_it.c ****   */
 244:Src/stm32f4xx_it.c **** void EXTI9_5_IRQHandler(void)
 245:Src/stm32f4xx_it.c **** {
 311              		.loc 1 245 1 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315 0000 08B5     		push	{r3, lr}
 316              	.LCFI5:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 3, -8
 319              		.cfi_offset 14, -4
 246:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 0 */
 247:Src/stm32f4xx_it.c **** 
 248:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 0 */
 249:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(INT1_GYRO_Pin);
 320              		.loc 1 249 3 view .LVU41
 321 0002 2020     		movs	r0, #32
 322 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 323              	.LVL7:
 250:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 1 */
 251:Src/stm32f4xx_it.c **** 
 252:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 1 */
 253:Src/stm32f4xx_it.c **** }
 324              		.loc 1 253 1 is_stmt 0 view .LVU42
 325 0008 08BD     		pop	{r3, pc}
 326              		.cfi_endproc
 327              	.LFE146:
 329              		.section	.text.CAN2_RX0_IRQHandler,"ax",%progbits
 330              		.align	1
 331              		.global	CAN2_RX0_IRQHandler
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 336              	CAN2_RX0_IRQHandler:
 337              	.LFB147:
ARM GAS  /tmp/ccV3Z8WK.s 			page 11


 254:Src/stm32f4xx_it.c **** 
 255:Src/stm32f4xx_it.c **** /**
 256:Src/stm32f4xx_it.c ****   * @brief This function handles CAN2 RX0 interrupts.
 257:Src/stm32f4xx_it.c ****   */
 258:Src/stm32f4xx_it.c **** void CAN2_RX0_IRQHandler(void)
 259:Src/stm32f4xx_it.c **** {
 338              		.loc 1 259 1 is_stmt 1 view -0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342 0000 08B5     		push	{r3, lr}
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 3, -8
 346              		.cfi_offset 14, -4
 260:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
 261:Src/stm32f4xx_it.c **** 
 262:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX0_IRQn 0 */
 263:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan2);
 347              		.loc 1 263 3 view .LVU44
 348 0002 0248     		ldr	r0, .L29
 349 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 350              	.LVL8:
 264:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
 265:Src/stm32f4xx_it.c **** 
 266:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX0_IRQn 1 */
 267:Src/stm32f4xx_it.c **** }
 351              		.loc 1 267 1 is_stmt 0 view .LVU45
 352 0008 08BD     		pop	{r3, pc}
 353              	.L30:
 354 000a 00BF     		.align	2
 355              	.L29:
 356 000c 00000000 		.word	hcan2
 357              		.cfi_endproc
 358              	.LFE147:
 360              		.text
 361              	.Letext0:
 362              		.file 2 "/home/tianbot/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types
 363              		.file 3 "/home/tianbot/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 364              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 365              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 366              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 367              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 368              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 369              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 370              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 371              		.file 11 "Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/ccV3Z8WK.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccV3Z8WK.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccV3Z8WK.s:40     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:46     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccV3Z8WK.s:63     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:69     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccV3Z8WK.s:86     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:92     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccV3Z8WK.s:109    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:115    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccV3Z8WK.s:132    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:138    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccV3Z8WK.s:151    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:157    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccV3Z8WK.s:191    .text.EXTI0_IRQHandler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:197    .text.EXTI0_IRQHandler:0000000000000000 EXTI0_IRQHandler
     /tmp/ccV3Z8WK.s:218    .text.EXTI3_IRQHandler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:224    .text.EXTI3_IRQHandler:0000000000000000 EXTI3_IRQHandler
     /tmp/ccV3Z8WK.s:245    .text.EXTI4_IRQHandler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:251    .text.EXTI4_IRQHandler:0000000000000000 EXTI4_IRQHandler
     /tmp/ccV3Z8WK.s:272    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:278    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccV3Z8WK.s:298    .text.CAN1_RX0_IRQHandler:000000000000000c $d
     /tmp/ccV3Z8WK.s:303    .text.EXTI9_5_IRQHandler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:309    .text.EXTI9_5_IRQHandler:0000000000000000 EXTI9_5_IRQHandler
     /tmp/ccV3Z8WK.s:330    .text.CAN2_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccV3Z8WK.s:336    .text.CAN2_RX0_IRQHandler:0000000000000000 CAN2_RX0_IRQHandler
     /tmp/ccV3Z8WK.s:356    .text.CAN2_RX0_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
xTaskGetSchedulerState
xPortSysTickHandler
HAL_GPIO_EXTI_IRQHandler
HAL_CAN_IRQHandler
hcan1
hcan2
